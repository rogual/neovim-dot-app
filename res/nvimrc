set mouse=a

" Support detecting Neovim.app with exists("neovim_dot_app"). In the future
" this could contain the app version.
let neovim_dot_app = "HEAD"


" Some vim users are used to pressing Ctrl+6 to go to the alternate file, but
" this only ever worked because terminals don't distinguish it from Ctrl+^.
nnoremap <C-6> <C-^>

function! MacSetFont(name, size)
    call rpcnotify(1, "neovim.app.setfont", a:name, a:size)
endfunction

function! MacIncreaseFontSize()
    call rpcnotify(1, "neovim.app.larger")
endfunction

function! MacDecreaseFontSize()
    call rpcnotify(1, "neovim.app.smaller")
endfunction

function! MacShowFontSelector()
    call rpcnotify(1, "neovim.app.showfonts")
endfunction

function! MacToggleFullScreen()
    call rpcnotify(1, "neovim.app.fullscreen")
endfunction

function! MacMenu(name, keyEquivalent)
    call rpcnotify(1, "neovim.app.menu", a:name, a:keyEquivalent)
endfunction

function! MacNewWindow()
    call rpcnotify(1, "neovim.app.window")
endfunction

function! MacOpenFile()
    call rpcnotify(1, "neovim.app.openFile")
endfunction

function! MacSaveFile()
    if expand("%:p") == ""
        call rpcnotify(1, "neovim.app.saveFile")
    else
        write
    endif
endfunction

function! MacSaveAsFile()
    call rpcnotify(1, "neovim.app.saveAsFile")
endfunction

function! MacCloseTabOrWindow()
    try
        tabclose
    catch
         call rpcnotify(1, "neovim.app.closeTabOrWindow")
    endtry
endfunction

function! MacUpdateTitle()
    call rpcnotify(1, "neovim.app.updateTitle")
endfunction

function! MacBufChanged()
    let anyModified = s:mac_get_modified_buffers() != []
    call rpcnotify(1, "neovim.app.bufchanged", anyModified)
endfunction

function! MacGetDirtyBuffers()
    let dirtyBuffers = ""

    for x in s:mac_get_modified_buffers()
       let dirtyBuffers .= x . "\n" . bufname(x) . "\n"
    endfor

    silent! echo dirtyBuffers
endfunction

function! s:mac_get_modified_buffers()
    let allBufs      = range(1, bufnr('$'))
    let activeBufs   = filter(allBufs, 'buflisted(v:val)')

    return filter(activeBufs, 'getbufvar(v:val, "&modified")')
endfunction

function! MacOpenFileInBufferOrNewTab(filename)
    if expand("%:p") == "" && &modified == 0
        execute "edit " . a:filename
    else
        execute "tabedit " . a:filename
    endif
endfunction

function! MacSetOptionAsMeta(value)
    call rpcnotify(1, "neovim.app.setOptAsMeta", a:value)
endfunction

function! MacSetFontShouldAntialias(value)
    call rpcnotify(1, "neovim.app.shouldAntialias", a:value)
endfunction


" First, load the default menus
runtime menu.vim

" Remove menu commands that rely on :browse
aunmenu File.Open\.\.\.
aunmenu File.Split-Open\.\.\.
aunmenu File.Open\ Tab\.\.\.
aunmenu File.Save\ As\.\.\.
aunmenu File.Split\ Diff\ With\.\.\.
aunmenu File.Split\ Patched\ By\.\.\.

" Exit doesn't belong in the File menu
aunmenu &File.Save-Exit
aunmenu &File.Exit

" Add Mac font options
anoremenu &Edit.-nvapp1- :
anoremenu &Edit.Increase\ Font\ Size :call MacIncreaseFontSize()<CR>
anoremenu &Edit.Decrease\ Font\ Size :call MacDecreaseFontSize()<CR>
anoremenu &Edit.Show\ Fonts :call MacShowFontSelector()<CR>

" Add open/save controls
anoremenu .220 &File.Open… :call MacOpenFile()<CR>
anoremenu .220 &File.Save :call MacSaveFile()<CR>
anoremenu .350 &File.Save\ As… :call MacSaveAsFile()<CR>


" Add Mac tab controls
anoremenu .310 &File.New\ Window :call MacNewWindow()<CR>
anoremenu .336 &Window.New\ Tab :tabnew<CR>
anoremenu .337 &Window.Next\ Tab :tabnext<CR>
anoremenu .337 &Window.Previous\ Tab :tabprev<CR>
anoremenu .337 &Window.Close\ Tab :call MacCloseTabOrWindow()<CR>
anoremenu .337 &Window.Close\ Other\ Tabs :tabonly<CR>
anoremenu .338 &Window.-nvapp2- :

" Add Mac fullscreen control
anoremenu .900 &Window.-nvapp3- :
anoremenu .900 &Window.Toggle\ Full\ Screen :call MacToggleFullScreen()<CR>

" Assign Cmd-key shortcuts
call MacMenu("File.New Window", "D-n")
call MacMenu("File.Save", "D-s")
call MacMenu("File.Save As…", "D-S-s")
call MacMenu("File.Open…", "D-o")
call MacMenu("File.Print", "D-p")

call MacMenu("Edit.Undo", "D-z")
call MacMenu("Edit.Redo", "D-S-z")
call MacMenu("Edit.Cut", "D-x")
call MacMenu("Edit.Copy", "D-c")
call MacMenu("Edit.Paste", "D-v")
call MacMenu("Edit.Select All", "D-a")

call MacMenu("Edit.Increase Font Size", "D-+")
call MacMenu("Edit.Decrease Font Size", "D--")

call MacMenu("Window.New Tab", "D-t")
call MacMenu("Window.Next Tab", "D-}")
call MacMenu("Window.Previous Tab", "D-{")
call MacMenu("Window.Close Tab", "D-w")
call MacMenu("Window.Close Other Tabs", "D-S-w")

call MacMenu("Window.Toggle Full Screen", "D-f")

autocmd BufEnter,BufFilePost,BufWritePost * call MacUpdateTitle()

" Update modified status on all events that could cause a change
autocmd TextChanged,BufWritePost,InsertEnter,InsertLeave,BufEnter,BufLeave * call MacBufChanged()

" Send files to Preview to “print” them
set printexpr=MacPrintFile(v:fname_in)
function! MacPrintFile(fname)
    call system("open -a Preview " . a:fname)
    return v:shell_error
endfunc
